"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.SVoxChunk = void 0;
var flatbuffers = require("flatbuffers");
var SVoxChunk = /** @class */ (function () {
    function SVoxChunk() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SVoxChunk.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SVoxChunk.getRootAsSVoxChunk = function (bb, obj) {
        return (obj || new SVoxChunk()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SVoxChunk.getSizePrefixedRootAsSVoxChunk = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SVoxChunk()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SVoxChunk.prototype.sizeX = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    };
    SVoxChunk.prototype.sizeY = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    };
    SVoxChunk.prototype.sizeZ = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    };
    SVoxChunk.prototype.bitsPerIndex = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : 0;
    };
    SVoxChunk.prototype.palette = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    SVoxChunk.prototype.paletteLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SVoxChunk.prototype.paletteArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    SVoxChunk.prototype.indices = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    SVoxChunk.prototype.indicesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    SVoxChunk.prototype.indicesArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    SVoxChunk.startSVoxChunk = function (builder) {
        builder.startObject(6);
    };
    SVoxChunk.addSizeX = function (builder, sizeX) {
        builder.addFieldInt8(0, sizeX, 0);
    };
    SVoxChunk.addSizeY = function (builder, sizeY) {
        builder.addFieldInt8(1, sizeY, 0);
    };
    SVoxChunk.addSizeZ = function (builder, sizeZ) {
        builder.addFieldInt8(2, sizeZ, 0);
    };
    SVoxChunk.addBitsPerIndex = function (builder, bitsPerIndex) {
        builder.addFieldInt8(3, bitsPerIndex, 0);
    };
    SVoxChunk.addPalette = function (builder, paletteOffset) {
        builder.addFieldOffset(4, paletteOffset, 0);
    };
    SVoxChunk.createPaletteVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    SVoxChunk.startPaletteVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    SVoxChunk.addIndices = function (builder, indicesOffset) {
        builder.addFieldOffset(5, indicesOffset, 0);
    };
    SVoxChunk.createIndicesVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    SVoxChunk.startIndicesVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    SVoxChunk.endSVoxChunk = function (builder) {
        var offset = builder.endObject();
        builder.requiredField(offset, 12); // palette
        builder.requiredField(offset, 14); // indices
        return offset;
    };
    SVoxChunk.createSVoxChunk = function (builder, sizeX, sizeY, sizeZ, bitsPerIndex, paletteOffset, indicesOffset) {
        SVoxChunk.startSVoxChunk(builder);
        SVoxChunk.addSizeX(builder, sizeX);
        SVoxChunk.addSizeY(builder, sizeY);
        SVoxChunk.addSizeZ(builder, sizeZ);
        SVoxChunk.addBitsPerIndex(builder, bitsPerIndex);
        SVoxChunk.addPalette(builder, paletteOffset);
        SVoxChunk.addIndices(builder, indicesOffset);
        return SVoxChunk.endSVoxChunk(builder);
    };
    return SVoxChunk;
}());
exports.SVoxChunk = SVoxChunk;
